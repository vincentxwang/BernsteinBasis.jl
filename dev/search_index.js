var documenterSearchIndex = {"docs":
[{"location":"lift/#Lift","page":"Lift","title":"Lift","text":"","category":"section"},{"location":"lift/","page":"Lift","title":"Lift","text":"For a face f, we define the lift matrix mathbfL^f to be","category":"page"},{"location":"lift/","page":"Lift","title":"Lift","text":"mathbfL^f = mathbfM^-1mathbfM^f","category":"page"},{"location":"lift/","page":"Lift","title":"Lift","text":"where mathbfM and mathbfM^f are the Bernstein mass matrices defined by","category":"page"},{"location":"lift/","page":"Lift","title":"Lift","text":"beginaligned\nmathbfM_ij = int_hatD phi_i phi_j \nmathbfM_ij^f = int_f_hatD phi_i phi_j \nendaligned","category":"page"},{"location":"lift/","page":"Lift","title":"Lift","text":"We define mathbfL (synonymous with BernsteinLift) to be","category":"page"},{"location":"lift/","page":"Lift","title":"Lift","text":"mathbfL = left beginarraycccc mathbfL^1  mathbfL^2  mathbfL^3  mathbfL^4 endarray right","category":"page"},{"location":"derivative/#Derivative","page":"Derivative","title":"Derivative","text":"","category":"section"},{"location":"derivative/","page":"Derivative","title":"Derivative","text":"We define the 3D Bernstein derivative matrices bmD^rbmD^s bmD^t (synonymous with BernsteinDerivativeMatrix_3D_r, BernsteinDerivativeMatrix_3D_s, BernsteinDerivativeMatrix_3D_t respectively) to be the linear operators that satisfy","category":"page"},{"location":"derivative/","page":"Derivative","title":"Derivative","text":"beginalign*\nsum_j=1^N_p(bmD^r bmp)_j  psi_j = fracpartial ppartial r  sum_j=1^N_p(bmD^s bmp)_j  psi_j = fracpartial ppartial s  sum_j=1^N_p(bmD^t bmp)_j  psi_j = fracpartial ppartial t\nendalign*","category":"page"},{"location":"derivative/","page":"Derivative","title":"Derivative","text":"where bmp are the coefficients representing a polynomial p = sum_j=1^N_p bmp_j psi_j.","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"CurrentModule = BernsteinBasis","category":"page"},{"location":"reference/#BernsteinBasis","page":"Reference","title":"BernsteinBasis","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Documentation for BernsteinBasis.","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [BernsteinBasis]","category":"page"},{"location":"reference/#BernsteinBasis.BernsteinDerivativeMatrix_3D_r","page":"Reference","title":"BernsteinBasis.BernsteinDerivativeMatrix_3D_r","text":"BernsteinDerivativeMatrix_3D_r <: AbstractMatrix{Float64}\n\nDerivative matrix with respect to the first Cartesian coordinate r in the 3D Bernstein basis.\n\nFields\n\nN::Int: Order of Bernstein polynomials. Supports up to N = 20.\n\n\n\n\n\n","category":"type"},{"location":"reference/#BernsteinBasis.BernsteinDerivativeMatrix_3D_s","page":"Reference","title":"BernsteinBasis.BernsteinDerivativeMatrix_3D_s","text":"BernsteinDerivativeMatrix_3D_s <: AbstractMatrix{Float64}\n\nDerivative matrix with respect to the second Cartesian coordinate s in the 3D Bernstein basis.\n\nFields\n\nN::Int: Order of Bernstein polynomials. Supports up to N = 20.\n\n\n\n\n\n","category":"type"},{"location":"reference/#BernsteinBasis.BernsteinDerivativeMatrix_3D_t","page":"Reference","title":"BernsteinBasis.BernsteinDerivativeMatrix_3D_t","text":"BernsteinDerivativeMatrix_3D_t <: AbstractMatrix{Float64}\n\nDerivative matrix with respect to the third Cartesian coordinate t in the 3D Bernstein basis.\n\nFields\n\nN::Int: Order of Bernstein polynomials. Supports up to N = 20.\n\n\n\n\n\n","category":"type"},{"location":"reference/#BernsteinBasis.BernsteinLift","page":"Reference","title":"BernsteinBasis.BernsteinLift","text":"BernsteinLift\n\nLift matrix for a single face on a standard tetrahedron.\n\nChan, Jesse and Tim Warburton (2017) GPU-accelerated Bernstein-Bezier discontinuous Galerkin methods for wave problems DOI: 10.48550/arXiv.1512.06025\n\n\n\n\n\n","category":"type"},{"location":"reference/#BernsteinBasis.ElevationMatrix","page":"Reference","title":"BernsteinBasis.ElevationMatrix","text":"ElevationMatrix{N} <: AbstractMatrix{Float64}\n\nTwo-dimensional degree elevation operator for Bernstein polynomials. Expresses polynomials of degree N - 1 as polynomials of degree N.\n\nKirby, Robert C. (2016) Fast inversion of the simplicial Bernstein mass matrix DOI: 10.1007/s00211-016-0795-0\n\n\n\n\n\n","category":"type"},{"location":"reference/#BernsteinBasis.bernstein_2d_scalar_multiindex_lookup-Tuple{Any}","page":"Reference","title":"BernsteinBasis.bernstein_2d_scalar_multiindex_lookup","text":"bernstein_2d_scalar_multiindex_lookup(N)\n\nReturns a vector that maps scalar indices to multi-indices of the N-th degree Bernstein polynomials.\n\n\n\n\n\n","category":"method"},{"location":"reference/#BernsteinBasis.fast_lift_multiply!-NTuple{7, Any}","page":"Reference","title":"BernsteinBasis.fast_lift_multiply!","text":"fast_lift_multiply!(out, N, L0, x, offset, l_j, E)\n\nMultiplies x by the \"nice\" lift matrix face (rs-plane).\n\nArguments\n\nL0SparseMatrixCSCFloat64 Int64: Precomputed matrix as defined in (Chan 2017) xAbstractVector: Input vector tri_offset_tableNTuple20 NTuple21 Int: Precomputed vector of offset tuples l_j_tableNTuple20 Float64: Precomputed coefficients given by l_j(N) EVectorFloat64 Dummy vector (with same dimensions as x) to reduce redundant memory allocation.\n\nChan, Jesse and Tim Warburton (2017) GPU-accelerated Bernstein-Bezier discontinuous Galerkin methods for wave problems DOI: 10.48550/arXiv.1512.06025\n\n\n\n\n\n","category":"method"},{"location":"reference/#BernsteinBasis.get_coeff-NTuple{8, Any}","page":"Reference","title":"BernsteinBasis.get_coeff","text":"get_coeff(i1, j1, k1, l1, i2, j2, k2, l2)\n\nReturns the value of the (i1, j1, k1, l1), (i2, j2, k2, l2)-th entry of the 3D Bernstein derivative  matrix with respect to i (first barycentric coordinate).\n\n\n\n\n\n","category":"method"},{"location":"reference/#BernsteinBasis.ij_to_linear-Tuple{Any, Any, Any}","page":"Reference","title":"BernsteinBasis.ij_to_linear","text":"ij_to_linear(i,j,offset)\n\nReturns the scalar index of the (ijk)-th 2D Bernstein basis.\n\n\n\n\n\n","category":"method"},{"location":"reference/#BernsteinBasis.ijk_to_linear-NTuple{5, Any}","page":"Reference","title":"BernsteinBasis.ijk_to_linear","text":"ijk_to_linear(i,j,offset)\n\nReturns the scalar index of the (ijkl)-th 3D Bernstein basis.\n\n\n\n\n\n","category":"method"},{"location":"reference/#BernsteinBasis.reduction_multiply!-NTuple{4, Any}","page":"Reference","title":"BernsteinBasis.reduction_multiply!","text":"reduction_multiply!(out, N, x, offset)\n\nMultiplies x by the Bernstein reduction matrix that maps from degree N polynomials to  N - 1.\n\ntri_offsets(N) should be passed as the precomputed offset value.\n\n\n\n\n\n","category":"method"},{"location":"#BernsteinBasis","page":"Home","title":"BernsteinBasis","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package contains optimized reference element operators and algorithms for using a Bernstein basis in discontinuous Galerkin methods.","category":"page"},{"location":"notation/#Notation-and-conventions","page":"Notations and conventions","title":"Notation and conventions","text":"","category":"section"},{"location":"notation/#Reference-tetrahedron","page":"Notations and conventions","title":"Reference tetrahedron","text":"","category":"section"},{"location":"notation/","page":"Notations and conventions","title":"Notations and conventions","text":"We define our reference tetrahedron hatD in rst-space by","category":"page"},{"location":"notation/","page":"Notations and conventions","title":"Notations and conventions","text":"hatD = -1 leq rst mid r + s + t leq 1","category":"page"},{"location":"notation/","page":"Notations and conventions","title":"Notations and conventions","text":"We define the barycentric coordinates lambda_0 lambda_1 lambda_2 lambda_3 on hatD by","category":"page"},{"location":"notation/","page":"Notations and conventions","title":"Notations and conventions","text":"beginaligned\nlambda_0 = frac1 + r2  lambda_1 = frac1 + s2  lambda_2 = frac1 + t2  lambda_3 = - frac1 + r + s + t2 \nendaligned","category":"page"},{"location":"notation/#Bernstein-basis","page":"Notations and conventions","title":"Bernstein basis","text":"","category":"section"},{"location":"notation/","page":"Notations and conventions","title":"Notations and conventions","text":"Consider 4-tuples of non-negative integers (i j k l) satisfying i + j + k + l = N, where N is the desired degree of the Bernstein basis. Using these tuples, we define the (i j k l)-th three-dimensional Bernstein basis function as","category":"page"},{"location":"notation/","page":"Notations and conventions","title":"Notations and conventions","text":"psi_(i j k l) = fracNijkl lambda_0^i lambda_1^j lambda_2^k lambda_3^l","category":"page"},{"location":"notation/","page":"Notations and conventions","title":"Notations and conventions","text":"Note that there exist ","category":"page"},{"location":"notation/","page":"Notations and conventions","title":"Notations and conventions","text":"N_p = frac(N + 1)(N + 2)(N + 3)6","category":"page"},{"location":"notation/","page":"Notations and conventions","title":"Notations and conventions","text":"of these tuples for an N-degree 3D Bernstein basis. ","category":"page"},{"location":"notation/","page":"Notations and conventions","title":"Notations and conventions","text":"We will also assign each basis function a scalar index n by ordering the first three coordinates in reverse dictionary order. The ordering.jl file contains tools for efficiently converting between the two.","category":"page"}]
}
