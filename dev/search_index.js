var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = BernsteinBasis","category":"page"},{"location":"#BernsteinBasis","page":"Home","title":"BernsteinBasis","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for BernsteinBasis.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [BernsteinBasis]","category":"page"},{"location":"#BernsteinBasis.BernsteinDerivativeMatrix_3D_r","page":"Home","title":"BernsteinBasis.BernsteinDerivativeMatrix_3D_r","text":"BernsteinDerivativeMatrix_3D_r <: AbstractMatrix{Float64}\n\nDerivative matrix with respect to the first Cartesian coordinate r in the 3D Bernstein basis.\n\nFields\n\nN::Int: Order of Bernstein polynomials. Supports up to N = 20.\n\n\n\n\n\n","category":"type"},{"location":"#BernsteinBasis.BernsteinDerivativeMatrix_3D_s","page":"Home","title":"BernsteinBasis.BernsteinDerivativeMatrix_3D_s","text":"BernsteinDerivativeMatrix_3D_s <: AbstractMatrix{Float64}\n\nDerivative matrix with respect to the second Cartesian coordinate s in the 3D Bernstein basis.\n\nFields\n\nN::Int: Order of Bernstein polynomials. Supports up to N = 20.\n\n\n\n\n\n","category":"type"},{"location":"#BernsteinBasis.BernsteinDerivativeMatrix_3D_t","page":"Home","title":"BernsteinBasis.BernsteinDerivativeMatrix_3D_t","text":"BernsteinDerivativeMatrix_3D_t <: AbstractMatrix{Float64}\n\nDerivative matrix with respect to the third Cartesian coordinate t in the 3D Bernstein basis.\n\nFields\n\nN::Int: Order of Bernstein polynomials. Supports up to N = 20.\n\n\n\n\n\n","category":"type"},{"location":"#BernsteinBasis.BernsteinLift","page":"Home","title":"BernsteinBasis.BernsteinLift","text":"BernsteinLift\n\nLift matrix for a single face on a standard tetrahedron.\n\nChan, Jesse and Tim Warburton (2017) GPU-accelerated Bernstein-Bezier discontinuous Galerkin methods for wave problems [DOI: 10.48550/arXiv.1512.06025]https://doi.org/10.48550/arXiv.1512.06025\n\n\n\n\n\n","category":"type"},{"location":"#BernsteinBasis.ElevationMatrix","page":"Home","title":"BernsteinBasis.ElevationMatrix","text":"ElevationMatrix{N} <: AbstractMatrix{Float64}\n\nTwo-dimensional degree elevation operator for Bernstein polynomials. Expresses polynomials of degree N - 1 as polynomials of degree N.\n\nKirby, Robert C. (2016) Fast inversion of the simplicial Bernstein mass matrix [DOI: 10.1007/s00211-016-0795-0]https://doi.org/10.1007/s00211-016-0795-0\n\n\n\n\n\n","category":"type"},{"location":"#BernsteinBasis.bernstein_2d_scalar_multiindex_lookup-Tuple{Any}","page":"Home","title":"BernsteinBasis.bernstein_2d_scalar_multiindex_lookup","text":"bernstein_2d_scalar_multiindex_lookup(N)\n\nReturns a vector that maps scalar indices to multi-indices of the N-th degree Bernstein polynomials.\n\n\n\n\n\n","category":"method"},{"location":"#BernsteinBasis.fast_lift_multiply!-NTuple{7, Any}","page":"Home","title":"BernsteinBasis.fast_lift_multiply!","text":"fast_lift_multiply!(out, N, L0, x, offset, l_j, E)\n\nMultiply x` by nice lift matrix face\n\nL0 - as defined in paper x - input vector offset - precomputed vector of offset tuples generated by offsets(Tri(), N) lj - precomputed coefficients given by lj(N) E - pass to reduce redundant memory allocation. vector with same dimensions as x\n\n\n\n\n\n","category":"method"},{"location":"#BernsteinBasis.get_coeff-NTuple{8, Any}","page":"Home","title":"BernsteinBasis.get_coeff","text":"get_coeff(i1, j1, k1, l1, i2, j2, k2, l2)\n\nReturns the value of the (i1, j1, k1, l1), (i2, j2, k2, l2)-th entry of the 3D Bernstein derivative  matrix with respect to i (first barycentric coordinate).\n\n\n\n\n\n","category":"method"},{"location":"#BernsteinBasis.reduction_multiply!-NTuple{4, Any}","page":"Home","title":"BernsteinBasis.reduction_multiply!","text":"reduction_multiply!(out, N, x, offset)\n\nMultiplies x by the Bernstein reduction matrix that maps from degree N polynomials to  N - 1.\n\ntri_offsets(N) should be passed as the precomputed offset value.\n\n\n\n\n\n","category":"method"}]
}
